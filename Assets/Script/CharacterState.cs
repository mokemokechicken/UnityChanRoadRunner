// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;

public interface ICharacterControl {
	void Shoot (int direction);

	void MoveUpDown (int direction);

	void MoveLeftRight (int direction);

	void Grap ();

	Rigidbody getRigidbody ();

	void Freefall ();

	void GrapLadder ();

	void GrapBar ();
}

/*
 * Role:
 *	- Manage UnityChan's Status, Not Behavior.
 * 	- Process Events.
 *  - Call player actions when triggered by events.
 */
public class CharacterState {
	private int ladderEnter = 0;
	private int barEnter = 0;
	private bool isFalling = false;
	private bool isMovingLeftRight = false;
	private bool isMovingUpDown = false;
	private ICharacterControl chara;
	
	public CharacterState(ICharacterControl chara) {
		this.chara = chara;
	}
	
	// Status
	public bool IsOnBar() {
		return barEnter > 0;
	}
	
	public bool IsOnLadder() {
		return ladderEnter > 0;
	}
	
	public bool IsGripping() {
		return IsOnBar() || IsOnLadder();
	}
	
	public bool IsFalling() {
		return isFalling;
	}
	
	public bool IsGround() {
		return !IsOnBar() && !IsOnLadder() && !IsFalling();
	}
	
	public bool IsMovingLeftRight() {
		return isMovingLeftRight;
	}
	
	public bool IsMovingUpDown() {
		return isMovingUpDown;
	}
	
	
	//// Event 
	public void Tick() {
		if (IsOnBar()) {
			chara.Grap();
			chara.GrapBar();
		} else if (IsOnLadder()) {
			chara.Grap();
			chara.GrapLadder();
		} else {
			chara.Freefall();
		}
		
		// if Velocity.y reach some degree, Falling is True
//		if (chara.rigidbody.velocity.y <  -0.05f) {
		if (chara.getRigidbody().velocity.y <  -0.05f) {
				isFalling = true;
		} else {
			isFalling = false;
		}
	}
	
	// Key Event
	public void KeyLeftRight(int direction) {
		isMovingLeftRight = false;
		if (direction != 0 && !IsFalling()) {
			chara.MoveLeftRight(direction);
			isMovingLeftRight = true;
		}
	}
	
	public void KeyUpDown(int direction) {
		isMovingUpDown = false;
		if (IsOnLadder() && direction != 0) {
			chara.MoveUpDown(direction);
			isMovingUpDown = true;
		} else if (IsOnBar() && direction == -1) {
			ReleaseBar();
		}
	}
	
	public void KeyGun(int direction) {
		if (!IsFalling() && direction != 0) {
			chara.Shoot(direction);
		}
	}
	
	public void ReleaseBar() {
		barEnter = 0;
	}
	
	public void OnTriggerEnter(GameObject go) {
		switch(go.tag) {
		case Tag.LADDER:
			ladderEnter += 1;
			break;
		case Tag.BAR:
			barEnter += 1;
			break;
		}
	}
	
	public void OnTriggerExit(GameObject go) {
		switch(go.tag) {
		case Tag.LADDER:
			ladderEnter -= 1;
			break;
		case Tag.BAR:
			if (barEnter > 0) {
				barEnter -= 1;
			}
			break;
		}
	}
}
